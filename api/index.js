"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const dotenv_1 = require("dotenv");
const cors_1 = __importDefault(require("cors"));
const uuid_1 = require("uuid");
const morgan_1 = __importDefault(require("morgan"));
const client_dynamodb_1 = require("@aws-sdk/client-dynamodb");
const lib_dynamodb_1 = require("@aws-sdk/lib-dynamodb");
(0, dotenv_1.config)();
const port = process.env.PORT || 80;
const region = process.env.REGION || "us-east-1";
const app = (0, express_1.default)();
if (process.env.NODE_ENV !== "production") {
    app.use((0, morgan_1.default)("dev"));
}
else {
    app.use((0, morgan_1.default)("combined"));
}
const ddbClient = new client_dynamodb_1.DynamoDBClient({ region });
const marshallOptions = {
    converEmptyValues: false,
    removeUndefinedValues: true,
};
const dynamodb = lib_dynamodb_1.DynamoDBDocumentClient.from(ddbClient, { marshallOptions });
app.use((0, cors_1.default)());
app.use(express_1.default.json());
app.post("/", async (req, res) => {
    const { name, description, completed } = req.body.todo;
    const todo = {
        sort_key: (0, uuid_1.v4)(),
        partition_key: "todo",
        name,
        description,
        completed,
    };
    const params = {
        TableName: "main_table",
        Item: todo,
    };
    const command = new lib_dynamodb_1.PutCommand(params);
    await dynamodb.send(command);
    res.status(200).send({
        todo,
    });
});
app.get("/", async (_, res) => {
    const params = {
        TableName: "main_table",
        ExpressionAttributeNames: {
            "#pk": "partition_key",
        },
        ExpressionAttributeValues: {
            ":pk": "todo",
        },
        KeyConditionExpression: "#pk = :pk",
    };
    const command = new lib_dynamodb_1.QueryCommand(params);
    const { Items } = await dynamodb.send(command);
    res.status(200).send({
        todos: Items,
    });
});
app.get("/healthcheck", async (_, res) => res.status(200).send(JSON.stringify("OK")));
app.listen(port, () => {
    console.info(`API listening on port ${port}`);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLHNEQUE4QjtBQUM5QixtQ0FBZ0M7QUFDaEMsZ0RBQXdCO0FBQ3hCLCtCQUFvQztBQUNwQyxvREFBNEI7QUFDNUIsOERBQTBEO0FBQzFELHdEQU0rQjtBQUUvQixJQUFBLGVBQU0sR0FBRSxDQUFDO0FBRVQsTUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDO0FBQ3BDLE1BQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxJQUFJLFdBQVcsQ0FBQztBQUNqRCxNQUFNLEdBQUcsR0FBRyxJQUFBLGlCQUFPLEdBQUUsQ0FBQztBQUV0QixJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxLQUFLLFlBQVksRUFBRSxDQUFDO0lBQzFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBQSxnQkFBTSxFQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFDekIsQ0FBQztLQUFNLENBQUM7SUFDTixHQUFHLENBQUMsR0FBRyxDQUFDLElBQUEsZ0JBQU0sRUFBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO0FBQzlCLENBQUM7QUFFRCxNQUFNLFNBQVMsR0FBRyxJQUFJLGdDQUFjLENBQUMsRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDO0FBRWpELE1BQU0sZUFBZSxHQUFHO0lBQ3RCLGlCQUFpQixFQUFFLEtBQUs7SUFDeEIscUJBQXFCLEVBQUUsSUFBSTtDQUM1QixDQUFDO0FBRUYsTUFBTSxRQUFRLEdBQUcscUNBQXNCLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxFQUFFLGVBQWUsRUFBRSxDQUFDLENBQUM7QUFFN0UsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFBLGNBQUksR0FBRSxDQUFDLENBQUM7QUFDaEIsR0FBRyxDQUFDLEdBQUcsQ0FBQyxpQkFBTyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7QUFFeEIsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRTtJQUMvQixNQUFNLEVBQUUsSUFBSSxFQUFFLFdBQVcsRUFBRSxTQUFTLEVBQUUsR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztJQUV2RCxNQUFNLElBQUksR0FBRztRQUNYLFFBQVEsRUFBRSxJQUFBLFNBQU0sR0FBRTtRQUNsQixhQUFhLEVBQUUsTUFBTTtRQUNyQixJQUFJO1FBQ0osV0FBVztRQUNYLFNBQVM7S0FDVixDQUFDO0lBRUYsTUFBTSxNQUFNLEdBQW9CO1FBQzlCLFNBQVMsRUFBRSxZQUFZO1FBQ3ZCLElBQUksRUFBRSxJQUFJO0tBQ1gsQ0FBQztJQUVGLE1BQU0sT0FBTyxHQUFHLElBQUkseUJBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUV2QyxNQUFNLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7SUFFN0IsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFDbkIsSUFBSTtLQUNMLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDO0FBRUgsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsRUFBRTtJQUM1QixNQUFNLE1BQU0sR0FBc0I7UUFDaEMsU0FBUyxFQUFFLFlBQVk7UUFDdkIsd0JBQXdCLEVBQUU7WUFDeEIsS0FBSyxFQUFFLGVBQWU7U0FDdkI7UUFDRCx5QkFBeUIsRUFBRTtZQUN6QixLQUFLLEVBQUUsTUFBTTtTQUNkO1FBQ0Qsc0JBQXNCLEVBQUUsV0FBVztLQUNwQyxDQUFDO0lBRUYsTUFBTSxPQUFPLEdBQUcsSUFBSSwyQkFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRXpDLE1BQU0sRUFBRSxLQUFLLEVBQUUsR0FBRyxNQUFNLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7SUFFL0MsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFDbkIsS0FBSyxFQUFFLEtBQUs7S0FDYixDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQztBQUVILEdBQUcsQ0FBQyxHQUFHLENBQUMsY0FBYyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLEVBQUUsQ0FDdkMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUMzQyxDQUFDO0FBRUYsR0FBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFO0lBQ3BCLE9BQU8sQ0FBQyxJQUFJLENBQUMseUJBQXlCLElBQUksRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZXhwcmVzcyBmcm9tIFwiZXhwcmVzc1wiO1xuaW1wb3J0IHsgY29uZmlnIH0gZnJvbSBcImRvdGVudlwiO1xuaW1wb3J0IGNvcnMgZnJvbSBcImNvcnNcIjtcbmltcG9ydCB7IHY0IGFzIHV1aWR2NCB9IGZyb20gXCJ1dWlkXCI7XG5pbXBvcnQgbW9yZ2FuIGZyb20gXCJtb3JnYW5cIjtcbmltcG9ydCB7IER5bmFtb0RCQ2xpZW50IH0gZnJvbSBcIkBhd3Mtc2RrL2NsaWVudC1keW5hbW9kYlwiO1xuaW1wb3J0IHtcbiAgRHluYW1vREJEb2N1bWVudENsaWVudCxcbiAgUHV0Q29tbWFuZCxcbiAgUHV0Q29tbWFuZElucHV0LFxuICBRdWVyeUNvbW1hbmQsXG4gIFF1ZXJ5Q29tbWFuZElucHV0LFxufSBmcm9tIFwiQGF3cy1zZGsvbGliLWR5bmFtb2RiXCI7XG5cbmNvbmZpZygpO1xuXG5jb25zdCBwb3J0ID0gcHJvY2Vzcy5lbnYuUE9SVCB8fCA4MDtcbmNvbnN0IHJlZ2lvbiA9IHByb2Nlc3MuZW52LlJFR0lPTiB8fCBcInVzLWVhc3QtMVwiO1xuY29uc3QgYXBwID0gZXhwcmVzcygpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIGFwcC51c2UobW9yZ2FuKFwiZGV2XCIpKTtcbn0gZWxzZSB7XG4gIGFwcC51c2UobW9yZ2FuKFwiY29tYmluZWRcIikpO1xufVxuXG5jb25zdCBkZGJDbGllbnQgPSBuZXcgRHluYW1vREJDbGllbnQoeyByZWdpb24gfSk7XG5cbmNvbnN0IG1hcnNoYWxsT3B0aW9ucyA9IHtcbiAgY29udmVyRW1wdHlWYWx1ZXM6IGZhbHNlLFxuICByZW1vdmVVbmRlZmluZWRWYWx1ZXM6IHRydWUsXG59O1xuXG5jb25zdCBkeW5hbW9kYiA9IER5bmFtb0RCRG9jdW1lbnRDbGllbnQuZnJvbShkZGJDbGllbnQsIHsgbWFyc2hhbGxPcHRpb25zIH0pO1xuXG5hcHAudXNlKGNvcnMoKSk7XG5hcHAudXNlKGV4cHJlc3MuanNvbigpKTtcblxuYXBwLnBvc3QoXCIvXCIsIGFzeW5jIChyZXEsIHJlcykgPT4ge1xuICBjb25zdCB7IG5hbWUsIGRlc2NyaXB0aW9uLCBjb21wbGV0ZWQgfSA9IHJlcS5ib2R5LnRvZG87XG5cbiAgY29uc3QgdG9kbyA9IHtcbiAgICBzb3J0X2tleTogdXVpZHY0KCksXG4gICAgcGFydGl0aW9uX2tleTogXCJ0b2RvXCIsXG4gICAgbmFtZSxcbiAgICBkZXNjcmlwdGlvbixcbiAgICBjb21wbGV0ZWQsXG4gIH07XG5cbiAgY29uc3QgcGFyYW1zOiBQdXRDb21tYW5kSW5wdXQgPSB7XG4gICAgVGFibGVOYW1lOiBcIm1haW5fdGFibGVcIixcbiAgICBJdGVtOiB0b2RvLFxuICB9O1xuXG4gIGNvbnN0IGNvbW1hbmQgPSBuZXcgUHV0Q29tbWFuZChwYXJhbXMpO1xuXG4gIGF3YWl0IGR5bmFtb2RiLnNlbmQoY29tbWFuZCk7XG5cbiAgcmVzLnN0YXR1cygyMDApLnNlbmQoe1xuICAgIHRvZG8sXG4gIH0pO1xufSk7XG5cbmFwcC5nZXQoXCIvXCIsIGFzeW5jIChfLCByZXMpID0+IHtcbiAgY29uc3QgcGFyYW1zOiBRdWVyeUNvbW1hbmRJbnB1dCA9IHtcbiAgICBUYWJsZU5hbWU6IFwibWFpbl90YWJsZVwiLFxuICAgIEV4cHJlc3Npb25BdHRyaWJ1dGVOYW1lczoge1xuICAgICAgXCIjcGtcIjogXCJwYXJ0aXRpb25fa2V5XCIsXG4gICAgfSxcbiAgICBFeHByZXNzaW9uQXR0cmlidXRlVmFsdWVzOiB7XG4gICAgICBcIjpwa1wiOiBcInRvZG9cIixcbiAgICB9LFxuICAgIEtleUNvbmRpdGlvbkV4cHJlc3Npb246IFwiI3BrID0gOnBrXCIsXG4gIH07XG5cbiAgY29uc3QgY29tbWFuZCA9IG5ldyBRdWVyeUNvbW1hbmQocGFyYW1zKTtcblxuICBjb25zdCB7IEl0ZW1zIH0gPSBhd2FpdCBkeW5hbW9kYi5zZW5kKGNvbW1hbmQpO1xuXG4gIHJlcy5zdGF0dXMoMjAwKS5zZW5kKHtcbiAgICB0b2RvczogSXRlbXMsXG4gIH0pO1xufSk7XG5cbmFwcC5nZXQoXCIvaGVhbHRoY2hlY2tcIiwgYXN5bmMgKF8sIHJlcykgPT5cbiAgcmVzLnN0YXR1cygyMDApLnNlbmQoSlNPTi5zdHJpbmdpZnkoXCJPS1wiKSlcbik7XG5cbmFwcC5saXN0ZW4ocG9ydCwgKCkgPT4ge1xuICBjb25zb2xlLmluZm8oYEFQSSBsaXN0ZW5pbmcgb24gcG9ydCAke3BvcnR9YCk7XG59KTtcbiJdfQ==